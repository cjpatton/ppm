



TODO Working Group                                             C. Patton
Internet-Draft                                                Cloudflare
Intended status: Informational                         16 September 2021
Expires: 20 March 2022


        Multi-party Protocols for Privacy-preserving Measurement
                     draft-patton-multi-ppm-latest

Abstract

   TODO Abstract

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Discussion of this document takes place on the mailing list (), which
   is archived at .

   Source for this draft and an issue tracker can be found at
   https://github.com/cjpatton/ppm.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 20 March 2022.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction
   2.  Verifiable and Distributed Aggregation Functions (VDAFs)
   3.  Conventions and Definitions
   4.  Security Considerations
   5.  IANA Considerations
   6.  Normative References
   Acknowledgments
   Author's Address

1.  Introduction

   TODO Introduction

2.  Verifiable and Distributed Aggregation Functions (VDAFs)

   A "Verifiable and Distributed Aggregation Function (VDAF)" specifies
   the distributed execution of an aggregation function wherein the
   client splits its input into input shares and the aggregators verify
   the input shares and derive output shares.

   *  "dist_input(input: I) -> input_shares: W^s" is the input-
      distribution algorithm and is run by the client.  The "i"-th input
      share is sent to the "i"-th aggregator for every "1 <= i <= s".
      Set "I" is called the input space and set "W" is called the input-
      share space.

   *  "dist_init(param: P) -> states: Q^s" is the state-initialization
      algorithm.  It is executed out-of-band in order to configure the
      initial state of each aggregator, including any shared randomness.
      Set "P" is called the parameter space and set "Q" is called the
      state space.

   *  "dist_start(state: Q, input_share: W) -> (new_state: Q, outbound:
      M)" is the verify-start algorithm and is run by each aggregator in
      response to an input share from the client.  Its output is the
      aggregator's round-1 message.  Set "M" is called the message
      space.

   *  "dist_next_N(state: Q, inbound: M^s) -> (new_state: Q, outbound:
      M)" is the round-"N" verification algorithm.  It consumes the
      round-"N-1" messages and produces the aggregator's round-"N"
      message.  The protocol defines this function for every "2 <= N <=
      r".  (If "r=1", then this function is not defined.)

   *  "dist_finish(state: Q, inbound: M^s) -> output_share: O" is the
      verify-finish algorithm.  It consumes the round-"r" messages and
      produces the aggregator's output share or an indication that the
      input shares are invalid.

   [OPEN ISSUE: What we call an "input share" here is an "input share
   and proof share" in the paper.  We'll need to harmonize the
   terminology, probably by fixing the paper.]

   [OPEN ISSUE: What we call a "VDAF" is the composition of a "DAF" and
   its input validation protocol from the paper.  We'll need to
   harmonize the terminology, probably by fixing the paper.]

   client
     | input
     v
   +-----------------------------------------------------------+
   | dist_input()                                              |
   +-----------------------------------------------------------+
     | input_shares[1]  | input_shares[2]    ... | input_shares[s]
     v                  v                        v
   +---------------+  +---------------+        +---------------+
   | dist_start()  |  | dist_start()  |        | dist_start()  |
   +---------------+  +---------------+        +---------------+
     | msg[1,1]         | msg[2,1]          ...  | msg[s,1]
     =============================================
     |                  |                        |
     v                  v                        v
   +---------------+  +---------------+        +---------------+
   | dist_next_2() |  | dist_next_2() |        | dist_next_2() |
   +---------------+  +---------------+        +---------------+
     | msg[1,2]         | msg[2,2]          ...  | msg[s,2]
     =============================================
     |                  |                        |
     v                  v                   .    v
                                            .
                                            .
     | msg[1,r]         | msg[2,r]          ...  | msg[s,r]
     =============================================
     |                  |                        |
     v                  v                        v
   +---------------+  +---------------+        +---------------+
   | dist_finish() |  | dist_finish() |        | dist_finish() |
   +---------------+  +---------------+        +---------------+
     | output_shares[1] | output_shares[2]  ...  | output_shares[s]
     v                  v                        v
   aggregator 1       aggregator 2             aggregator s

     Figure 1: Flow of an r-round, s-aggregator DIVP.  The '====' line
                      represents a broadcast channel.

3.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

4.  Security Considerations

   TODO Security

5.  IANA Considerations

   This document has no IANA actions.

6.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://datatracker.ietf.org/doc/html/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://datatracker.ietf.org/doc/html/rfc8174>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Christopher Patton
   Cloudflare

   Email: chrispatton+ietf@gmail.com
