



TODO Working Group                                             C. Patton
Internet-Draft                                                Cloudflare
Intended status: Informational                         16 September 2021
Expires: 20 March 2022


        Multi-party Protocols for Privacy-preserving Measurement
                     draft-patton-multi-ppm-latest

Abstract

   TODO Abstract

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Discussion of this document takes place on the mailing list (), which
   is archived at .

   Source for this draft and an issue tracker can be found at
   https://github.com/cjpatton/ppm.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 20 March 2022.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Distributed Aggregation Functions
     3.1.  Aggregability
   4.  Verifiable Distributed Aggregation Functions
   5.  Security Considerations
   6.  IANA Considerations
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   TODO Introduction

   Papers with techniques we're hoping to unify into one primitive:
   [AGJp21], [BBCGp19], [BBCGp21], [CGB17], ... any others?

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Distributed Aggregation Functions

   client
     | input
     v
   +-----------------------------------------------------------+
   | dist_input()                                              |
   +-----------------------------------------------------------+
     | input_shares[1]  | input_shares[2]   ...  | input_shares[s]
     v                  v                        v
   +---------------+  +---------------+        +---------------+
   | dist_output() |  | dist_output() |        | dist_output() |
   +---------------+  +---------------+        +---------------+
     | output_shares[1] | output_shares[2]  ...  | output_shares[s]
     v                  v                        v
   aggregator 1       aggregator 2             aggregator s

                Figure 1: Execution of an s-aggregator DAF.

   A "Distributed Aggregation Function (DAF)" is a multi-party protocol
   for executing an aggregation function over a set of user inputs.  By
   distributing the input across multiple aggregators, the protocol
   ensures that individual inputs are never seen in the clear.
   Syntactically, a DAF is made up of two algorithms:

   *  "dist_input(input: I) -> input_shares: W^s" is the randomized
      input-distribution algorithm.  It is run by the client in order to
      split its input into "s" input shares, where "s" is the number of
      aggregators.  Set "I" is called the input space and set "W" is
      called the input-share space.  The sequence of input shares is
      sometimes referred to as the distributed input.

   *  "dist_output(param: P, input_share: W) -> output_share: O" is the
      deterministic output-recovery algorithm.  It is run be each
      aggregator in order to map an input share into an output share.
      This mapping has an optional parameter, which can be used to
      "query" the input share multiple times, getting a different output
      share each time.  Set "P" is called the parameter space and set
      "O" is called the output space.

   Execution of a DAF is illustrated in Figure 1.  The client runs the
   input-distribution algorithm and sends an input share to each one of
   the aggregators.  The aggregators select a parameter for querying
   their input shares and run the output-recovery algorithm to obtain
   their output shares.  DAF schemes are designed to ensure that no
   proper subset of the aggregators can discern any information about
   the input or output given their view of the protocol.  (See
   Section 5.)

   An example of a DAF is a "Distributed Point function" [GI14].  This
   protocol is used to compute a "point function", which evaluates to
   zero on every input except for one, called the "point".  The input-
   distribution algorithm takes as input the point and the non-zero
   value and returns a set of input shares.  Each aggregator evaluates
   its share at specific points and combine their output shares to get
   the results.

   Another, slightly simpler, example of a DAF is the combination of a
   linear secret sharing scheme with an "AFfine-aggregatable Encoding
   (AFE)" described for Prio [CGB17].  An AFE represents a measurement
   as a as a vector of elements of a finite field such that (1) the
   measurement can be efficiently secret shared and (2) the aggregate
   measurement can be computed by summing up the vectors.

3.1.  Aggregability

   TODO Require that the output space forms an additive group.

   TODO Say what aggregability means and define aggregation function.

4.  Verifiable Distributed Aggregation Functions

   client
     | input
     v
   +-----------------------------------------------------------+
   | dist_input()                                              |
   +-----------------------------------------------------------+
     | input_shares[1]  | input_shares[2]   ...  | input_shares[s]
     v                  v                        v
   +---------------+  +---------------+        +---------------+
   | dist_start()  |  | dist_start()  |        | dist_start()  |
   +---------------+  +---------------+        +---------------+
     | msg[1,1]         | msg[1,2]          ...  | msg[1,s]
     =============================================
     |                  |                        |
     v                  v                        v
   +---------------+  +---------------+        +---------------+
   | dist_next_2() |  | dist_next_2() |        | dist_next_2() |
   +---------------+  +---------------+        +---------------+
     | msg[2,1]         | msg[2,2]          ...  | msg[2,s]
     =============================================
     |                  |                        |
     v                  v                        v
     .                  .                        .
     .                  .                        .
     .                  .                        .
     | msg[r,1]         | msg[r,2]          ...  | msg[r,s]
     =============================================
     |                  |                        |
     v                  v                        v
   +---------------+  +---------------+        +---------------+
   | dist_finish() |  | dist_finish() |        | dist_finish() |
   +---------------+  +---------------+        +---------------+
     | output_shares[1] | output_shares[2]  ...  | output_shares[s]
     v                  v                        v
   aggregator 1       aggregator 2             aggregator s

       Figure 2: Execution of an r-round, s-aggregator VDAF.  The ===
                    line represents a broadcast channel.

   TODO Say what it means for a distributed input to be (in)valid.

   Because each aggregator only holds a piece of the distributed input,
   there is no way for them to check that the DAF output is valid
   without revealing their shares to one another.  A "Verifiable
   Distributed Aggregation Function (VDAF)" is a protocol designed to
   ensure that the aggregators only recover output shares if the
   corresponding input shares are valid.

   Execution of a VDAF is illustrated in Figure 2.  It begins just as
   before (Figure 1) by having the client run the input-distribution
   algorithm and send an input share to each of the aggregators.  The
   aggregators then proceed in rounds, where in each round, each
   aggregator produces a single outbound message and writes it to a
   broadcast channel.  The broadcast channel waits for every aggregator
   to output a message, then sends all of the messages to each
   aggregator to begin the next round.  Eventually, each aggregator
   decides if the input shares are valid based on its view of the
   protocol.  If so, it returns an output share.  Otherwise it returns
   an indication of invalidity.

   Syntactically, a VDAF is made up of the following algorithms:

   *  "dist_input(input: I) -> input_shares: W^s" is the input-
      distribution algorithm defined precisely the same way as
      Section 3.

   *  "dist_init(param: P) -> states: Q^s" is the state-initialization
      algorithm.  It is executed out-of-band in order to configure the
      initial state of each aggregator, including any shared randomness.
      Set "Q" is called the state space.

   *  "dist_start(state: Q, input_share: W) -> (new_state: Q, outbound:
      M)" is the verify-start algorithm and is run by each aggregator in
      response to an input share from the client.  Its output is the
      aggregator's round-"1" message.  Set "M" is called the message
      space.

   *  "dist_next_N(state: Q, inbound: M^s) -> (new_state: Q, outbound:
      M)" is the round-"N" verification algorithm.  It consumes the
      round-"(N-1)" messages and produces the aggregator's round-"N"
      message.  The protocol defines this function for every "2 <= N <=
      r".  (If "r=1", then this function is not defined.)

   *  "dist_finish(state: Q, inbound: M^s) -> output_share: O" is the
      verify-finish algorithm.  It consumes the round-"r" messages and
      produces the aggregator's output share or an indication that the
      input shares are invalid.

   TODO What we call an "input share" here is an "input share and proof
   share" in the paper.  We'll need to harmonize the terminology,
   probably by fixing the paper.

   TODO What we call a "VDAF" is the composition of a "DAF" and its
   input validation protocol from the paper.  We'll need to harmonize
   the terminology, probably by fixing the paper.

5.  Security Considerations

   TODO There will be a companion paper [PAPER] that will formalize the
   syntax and security of VDAFs and analyze some of the constructions
   specified here.  Here we will say at a high level what completeness,
   soundness, and privacy (i.e., zero-knowledge) are.

6.  IANA Considerations

   This document has no IANA actions.

7.  References

7.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://datatracker.ietf.org/doc/html/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://datatracker.ietf.org/doc/html/rfc8174>.

7.2.  Informative References

   [AGJp21]   "Prio+: Privacy Preserving Aggregate Statistics via
              Boolean Shares", n.d., <https://ia.cr/2021/576>.

   [BBCGp19]  "Zero-Knowledge Proofs on Secret-Shared Data via Fully
              Linear PCPs", CRYPTO 2019 , n.d..

   [BBCGp21]  "Lightweight Techniques for Private Heavy Hitters", IEEE
              S&P 2021 , n.d..

   [CGB17]    "Prio: Private, Robust, and Scalable Computation of
              Aggregate Statistics", NSDI 2017 , n.d..

   [GI14]     "Distributed Point Functions and Their Applications",
              EUROCRYPT 2014 , n.d..

   [PAPER]    "TODO", n.d..

Acknowledgments

   TODO acknowledge.

Author's Address

   Christopher Patton
   Cloudflare

   Email: chrispatton+ietf@gmail.com
